plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

architectury {
    minecraft = minecraft_version
}

allprojects {
    group = mod_group_id
    version = "$minecraft_version-$mod_version"
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        // 为 mod jar 名称设置后缀格式，例如 'example-fabric'。
        archivesName = "$mod_name-$name"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = mov_java_version as Integer
        targetCompatibility = mov_java_version as Integer
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = mov_java_version as Integer
    }

    processResources {
        // expand every property from gradle.properties
        def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
        stringProperties.each { inputs.property(it.key, it.value) }

        def files = ["*.mixins.json", "*.mod.json", "META-INF/mods.toml", "META-INF/neoforge.mods.toml"]
        files += mov_enabled_platforms.split(',').collect {"${mod_id}.${it}.mixins.json" }

        files.each {
            filesMatching(it) {
                expand(stringProperties) {
                    escapeBackslash = true
                }
            }
        }
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}
